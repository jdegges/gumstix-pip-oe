--- gnutls-1.3.5/libextra/gnutls_openssl.c.orig	2006-04-28 20:01:40.000000000 +0100
+++ gnutls-1.3.5/libextra/gnutls_openssl.c	2006-04-28 20:10:33.000000000 +0100
@@ -252,12 +252,17 @@
   ssl->rfd = (gnutls_transport_ptr_t) - 1;
   ssl->wfd = (gnutls_transport_ptr_t) - 1;
 
+  ssl->ssl_peek_buffer = NULL;
+  ssl->ssl_peek_buffer_size = ssl->ssl_peek_avail = 0;
+
   return ssl;
 }
 
 void
 SSL_free (SSL * ssl)
 {
+  if (ssl->ssl_peek_buffer)
+    free(ssl->ssl_peek_buffer);
   gnutls_certificate_free_credentials (ssl->gnutls_cred);
   gnutls_deinit (ssl->gnutls_state);
   free (ssl);
@@ -281,6 +286,7 @@
 SSL_set_fd (SSL * ssl, int fd)
 {
   gnutls_transport_set_ptr (ssl->gnutls_state, (gnutls_transport_ptr_t) fd);
+  ssl->rfd = ssl->wfd = fd;
   return 1;
 }
 
@@ -306,6 +312,17 @@
   return 1;
 }
 
+int SSL_get_rfd(SSL *ssl)
+{
+  return ssl->rfd;
+}
+
+int SSL_get_wfd(SSL *ssl)
+{
+  return ssl->wfd;
+}
+
+
 void
 SSL_set_bio (SSL * ssl, BIO * rbio, BIO * wbio)
 {
@@ -321,6 +338,8 @@
 int
 SSL_pending (SSL * ssl)
 {
+  if (ssl->ssl_peek_avail)
+    return ssl->ssl_peek_avail;
   return gnutls_record_check_pending (ssl->gnutls_state);
 }
 
@@ -476,11 +495,50 @@
   return 1;
 }
 
+int SSL_peek(SSL *ssl, void *buf, int len)
+{
+  if (len > ssl->ssl_peek_buffer_size) {
+    ssl->ssl_peek_buffer = realloc (ssl->ssl_peek_buffer, len);
+    ssl->ssl_peek_buffer_size = len;
+  }
+
+  if (ssl->ssl_peek_avail == 0) {
+
+    int ret;
+    
+    ret = gnutls_record_recv(ssl->gnutls_state, ssl->ssl_peek_buffer, len);
+    ssl->last_error = ret;
+    
+    if (ret > 0)
+      ssl->ssl_peek_avail += ret;
+  }
+
+  if (len > ssl->ssl_peek_avail)
+    len = ssl->ssl_peek_avail;
+
+  memcpy (buf, ssl->ssl_peek_buffer, len);
+
+  return len;
+}
+
 int
 SSL_read (SSL * ssl, void *buf, int len)
 {
   int ret;
 
+  if (ssl->ssl_peek_avail) {
+    int n = (ssl->ssl_peek_avail > len) ? len : ssl->ssl_peek_avail;
+
+    memcpy (buf, ssl->ssl_peek_buffer, n);
+
+    if (ssl->ssl_peek_avail > n)
+      memmove (ssl->ssl_peek_buffer, ssl->ssl_peek_buffer + n, ssl->ssl_peek_avail - n);
+
+    ssl->ssl_peek_avail -= n;
+
+    return n;
+  }
+
   ret = gnutls_record_recv (ssl->gnutls_state, buf, len);
   ssl->last_error = ret;
 
--- gnutls-1.3.5/includes/gnutls/openssl.h.orig	2006-04-28 20:10:55.000000000 +0100
+++ gnutls-1.3.5/includes/gnutls/openssl.h	2006-04-28 20:11:52.000000000 +0100
@@ -164,6 +164,11 @@
 
     gnutls_transport_ptr_t rfd;
     gnutls_transport_ptr_t wfd;
+
+    char *ssl_peek_buffer;
+    size_t ssl_peek_buffer_size;
+    size_t ssl_peek_avail;
+
   };
 
 #define rbio gnutls_state
