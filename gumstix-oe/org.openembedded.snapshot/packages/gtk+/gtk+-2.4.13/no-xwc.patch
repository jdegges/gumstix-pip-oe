--- gdk/x11/gdkdrawable-x11.c~	2003-08-18 17:02:39.000000000 +0100
+++ gdk/x11/gdkdrawable-x11.c	2004-03-29 21:30:17.000000000 +0100
@@ -636,12 +636,14 @@
 			 GDK_GC_GET_XGC (gc), x, y, (XChar2b *) text, text_length / 2);
 	}
     }
+#ifdef HAVE_XWC
   else if (font->type == GDK_FONT_FONTSET)
     {
       XFontSet fontset = (XFontSet) GDK_FONT_XFONT (font);
       XmbDrawString (xdisplay, impl->xid,
 		     fontset, GDK_GC_GET_XGC (gc), x, y, text, text_length);
     }
+#endif
   else
     g_error("undefined font type\n");
 }
@@ -673,6 +675,7 @@
                    GDK_GC_GET_XGC (gc), x, y, text_8bit, text_length);
       g_free (text_8bit);
     }
+#ifdef HAVE_XWC
   else if (font->type == GDK_FONT_FONTSET)
     {
       if (sizeof(GdkWChar) == sizeof(wchar_t))
@@ -693,7 +696,8 @@
 	  g_free (text_wchar);
 	}
     }
+#endif
   else
     g_error("undefined font type\n");
 }

--- gdk/x11/gdkim-x11.c~	2002-11-01 00:45:32.000000000 +0000
+++ gdk/x11/gdkim-x11.c	2004-03-29 21:28:30.000000000 +0100
@@ -51,6 +51,7 @@
 void
 _gdk_x11_initialize_locale (void)
 {
+#ifdef HAVE_XWC
   wchar_t result;
   gchar *current_locale;
   static char *last_locale = NULL;
@@ -96,6 +97,7 @@
   GDK_NOTE (XIM,
 	    g_message ("%s multi-byte string functions.", 
 		       gdk_use_mb ? "Using" : "Not using"));
+#endif
   
   return;
 }
@@ -139,6 +141,7 @@
 {
   gchar *mbstr;
 
+#ifdef HAVE_XWC
   if (gdk_use_mb)
     {
       GdkDisplay *display = find_a_display ();
@@ -177,6 +180,7 @@
       XFree (tpr.value);
     }
   else
+#endif
     {
       gint length = 0;
       gint i;
@@ -209,6 +213,7 @@
 gint
 gdk_mbstowcs (GdkWChar *dest, const gchar *src, gint dest_max)
 {
+#ifdef HAVE_XWC
   if (gdk_use_mb)
     {
       GdkDisplay *display = find_a_display ();
@@ -241,7 +246,8 @@
       return len_cpy;
     }
   else
+#endif
     {
       gint i;
 

--- gdk/x11/gdkfont-x11.c~	2003-03-06 20:17:55.000000000 +0000
+++ gdk/x11/gdkfont-x11.c	2004-03-29 21:29:40.000000000 +0100
@@ -594,10 +594,12 @@
 	  width = XTextWidth16 (xfont, (XChar2b *) text, text_length / 2);
 	}
       break;
+#ifdef HAVE_XWC
     case GDK_FONT_FONTSET:
       fontset = (XFontSet) private->xfont;
       width = XmbTextEscapement (fontset, text, text_length);
       break;
+#endif
     default:
       width = 0;
     }
@@ -647,6 +649,7 @@
           width = 0;
         }
       break;
+#ifdef HAVE_XWC
     case GDK_FONT_FONTSET:
       if (sizeof(GdkWChar) == sizeof(wchar_t))
 	{
@@ -664,6 +667,7 @@
 	  g_free (text_wchar);
 	}
       break;
+#endif
     default:
       width = 0;
     }
@@ -736,6 +740,7 @@
       if (descent)
 	*descent = overall.descent;
       break;
+#ifdef HAVE_XWC
     case GDK_FONT_FONTSET:
       fontset = (XFontSet) private->xfont;
       XmbTextExtents (fontset, text, text_length, &ink, &logical);
@@ -750,6 +755,7 @@
       if (descent)
 	*descent = ink.y + ink.height;
       break;
+#endif
     }
 
 }
@@ -822,6 +828,7 @@
 	  *descent = overall.descent;
 	break;
       }
+#ifdef HAVE_XWC
     case GDK_FONT_FONTSET:
       fontset = (XFontSet) private->xfont;
 
@@ -849,6 +856,7 @@
       if (descent)
 	*descent = ink.y + ink.height;
       break;
+#endif
     }
 
 }
